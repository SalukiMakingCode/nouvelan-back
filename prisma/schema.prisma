generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                    @id @default(autoincrement())
  firstName               String                 @db.VarChar(191)
  lastName                String?                @db.VarChar(191)
  email                   String                 @unique @db.VarChar(191)
  login                   String                 @unique @db.VarChar(191)
  password                String                 @db.VarChar(191)
  admin                   Boolean                @default(false)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @default(now()) @updatedAt
  isParticipatingThisYear Boolean                @default(false)
  recoveryPassword        UserRecoveryPassword[]
  scores                  Score[]
  photos                  Photo[]
}

model UserRecoveryPassword {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  code      Int
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

enum FileStatus {
  UPLOADED
  DELETABLE
}

model File {
  id              Int        @id @default(autoincrement())
  filename        String     @db.VarChar(255)
  initialFilename String     @db.VarChar(255)
  path            String     @db.VarChar(255)
  uri             String     @db.VarChar(255)
  status          FileStatus @default(UPLOADED)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now()) @updatedAt
  photo           Photo[]    @relation("photo_file")
}

model Photo {
  id          Int      @id @default(autoincrement())
  imageFile   File?    @relation("photo_file", fields: [imageFileId], references: [id])
  imageFileId Int?
  comment     String?  @db.VarChar(191)
  year        Year     @relation(fields: [yearId], references: [id])
  yearId      Int
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Year {
  id      Int     @id @default(autoincrement())
  year    String  @db.VarChar(191)
  current Boolean @default(false)
  photo   Photo[]
  scores  Score[]
}

model Score {
  id           Int  @id @default(autoincrement())
  user         User @relation(fields: [userId], references: [id])
  userId       Int
  year         Year @relation(fields: [yearId], references: [id])
  yearId       Int
  aperitif     Int
  entreeFroide Int
  soupe        Int
  entreeChaude Int
  sorbet       Int
  plat         Int
  dessert      Int

  @@unique([userId, yearId])
}
